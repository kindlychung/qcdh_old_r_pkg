{
    "contents" : "#include \"collapseGen.h\"\n\n// [[Rcpp::export]]\nIntegerMatrix collapseGenRcppGen(\n        IntegerMatrix a,\n        IntegerMatrix b,\n        std::string collmethod\n        )\n{\n    int nr = a.nrow();\n    int nc = a.ncol();\n    if(nr != b.nrow() or nc != b.ncol())\n        throw(std::invalid_argument(\"Two genotype matrices are not of the same dimension!\"));\n    arma::Mat<int> aArma(a.begin(), nr, nc, false);\n    arma::Mat<int> bArma(b.begin(), nr, nc, false);\n    arma::Mat<int> c(nr, nc);\n    collapseGenArmaGen(aArma, bArma, nr, nc, collmethod, c);\n    return wrap(c);\n}\n\n// [[Rcpp::export]]\nIntegerMatrix collapseGenRcppHap(\n        IntegerMatrix a1,\n        IntegerMatrix a2,\n        IntegerMatrix b1,\n        IntegerMatrix b2,\n        std::string collmethod\n        )\n{\n    int nr = a1.nrow();\n    int nc = a1.ncol();\n    if(\n            nr != a1.nrow() or\n            nc != a1.ncol() or\n            nr != a2.nrow() or\n            nc != a2.ncol() or\n            nr != b1.nrow() or\n            nc != b1.ncol() or\n            nr != b2.nrow() or\n            nc != b2.ncol()\n            )\n        throw(std::invalid_argument(\"Two genotype matrices are not of the same dimension!\"));\n    arma::Mat<int> a1Arma(a1.begin(), nr, nc, false);\n    arma::Mat<int> a2Arma(a2.begin(), nr, nc, false);\n    arma::Mat<int> b1Arma(b1.begin(), nr, nc, false);\n    arma::Mat<int> b2Arma(b2.begin(), nr, nc, false);\n    arma::Mat<int> c(nr, nc);\n    collapseGenArmaHap(a1Arma, a2Arma, b1Arma, b2Arma, nr, nc, collmethod, c);\n    return wrap(c);\n}\n\n\n\nvoid collapseGenArmaGen(\n        arma::Mat<int>& a,\n        arma::Mat<int>& b,\n        int nr, int nc,\n        std::string& collmethod,\n        arma::Mat<int>& c\n        )\n{\n    c = a + b;\n    for(int i=0; i<nr; i++) {\n        for(int j=0; j<nc; j++) {\n            if(0 <= c(i,j) and c(i,j) < 2) {\n                c(i,j) = 0;\n            } else if(c(i,j) == 2) {\n                c(i,j) = 1;\n            } else if(c(i,j) > 2) {\n                if(collmethod == \"pos\") {\n                    c(i, j) = 1;\n                } else if(collmethod == \"neg\") {\n                    c(i,j) = 0;\n                } else if(collmethod == \"neu\") {\n                    c(i,j) = -9;\n                } else {\n                    throw std::invalid_argument(\"Unknown collapsing method!\");\n                }\n            } else {\n                throw std::invalid_argument(\"Genotype value not recognized.\");\n            }\n        }\n    }\n}\n\nvoid collapseGenArmaHap(\n        arma::Mat<int>& a1,\n        arma::Mat<int>& a2,\n        arma::Mat<int>& b1,\n        arma::Mat<int>& b2,\n        int nr, int nc,\n        std::string& collmethod,\n        arma::Mat<int>& c\n        )\n{\n    c = (a1 + b1) % (a2 + b2);\n    for(int i=0; i<nr; i++) {\n        for(int j=0; j<nc; j++) {\n            if(0 <= c(i,j) and c(i,j) < 2) {\n            } else if(c(i,j) >= 2) {\n                if(collmethod == \"pos\") {\n                    c(i, j) = 1;\n                } else if(collmethod == \"neg\") {\n                    c(i,j) = 0;\n                } else if(collmethod == \"neu\") {\n                    c(i,j) = -9;\n                } else {\n                    throw std::invalid_argument(\"Unknown collapsing method!\");\n                }\n            } else {\n                throw std::invalid_argument(\"Genotype value not recognized.\");\n            }\n        }\n    }\n}\n\n\n// [[Rcpp::export]]\nIntegerMatrix summat(IntegerMatrix x, IntegerMatrix y) {\n    arma::Mat<int> x1(x.begin(), x.nrow(), x.ncol(), false);\n    arma::Mat<int> y1(y.begin(), y.nrow(), y.ncol(), false);\n    return wrap(x1 + y1);\n}\n",
    "created" : 1393335063003.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "382340388",
    "id" : "B2D981B2",
    "lastKnownWriteTime" : 1393676643,
    "path" : "~/Dropbox/rpkgs/qcdh/src/collapseGen.cpp",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "cpp"
}