library(qcdh)
setwd("~/rpkgs/qcdh/src")
Rcpp::sourceCpp('~/rpkgs/qcdh/src/testbm.cpp')
suppressMessages(require(bigmemory))
# set up big.matrix
nrows <- 10000
setwd("/tmp")
bkFile <- "bigmat.bk"
descFile <- "bigmatk.desc"
bigmat <- filebacked.big.matrix(nrow=nrows, ncol=3, type="double",
backingfile=bkFile, backingpath=".",
descriptorfile=descFile,
dimnames=c(NULL,NULL))
set.seed(123)
for (i in 1:3) bigmat[,i] = rnorm(nrows)*i
# Call the Rcpp function.
res <- BigColSums(bigmat@address)
print(res)
Rcpp::sourceCpp('~/rpkgs/qcdh/src/testbm.cpp')
setwd("/tmp")
installed.packages("bigmemory")
install.packages("bigmemory")
Rcpp::sourceCpp('~/rpkgs/qcdh/src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
x = matrix(1:4, 2)
y = matrix(4:7, 2)
x
y
testlogic(a, b)
testlogic(x, y)
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
testlogic(x, y)
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
testlogic(x, y)
Rcpp::sourceCpp('src/collapseGen.cpp')
testlogic(x, y)
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
scalar_missings()
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
summat(x, y)
x = matrix(1:4, 2)
x = matrix(6:9, 2)
x = matrix(1:4, 2)
y = matrix(6:9, 2)
summat(x, y)
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
Rcpp::sourceCpp('src/collapseGen.cpp')
x = matrix(sample(0:2, 16, replace=T), 4)
x
y = matrix(sample(0:2, 16, replace=T), 4)
y
collapsegen(x, y, collmethod="pos")
x + y
collapsegen(x, y, collmethod="pos")
collapsegen(x, y, collmethod="neg")
Rcpp::sourceCpp('src/collapseGen.cpp')
x + y
collapsegen(x, y, collmethod="pos")
collapsegen(x, y, collmethod="neg")
collapsegen(x, y, collmethod="neu")
Rcpp::sourceCpp('~/rpkgs/qcdh/src/collapseGen.cpp')
Rcpp::sourceCpp('~/rpkgs/qcdh/src/collapseGen.cpp')
Rcpp::sourceCpp('~/Dropbox/workspace/test/src/collapseGen.cpp')
Rcpp::sourceCpp('~/Dropbox/workspace/test/src/collapseGen.cpp')
library(qcdh)
setwd('/home/kaiyin/workspace/Rplay/')
library(qcdh)
x = matrix(sample(0:2, 100, replace=TRUE), 10)
y = matrix(sample(0:2, 100, replace=TRUE), 10)
x
y
library(qcdh)
source('~/Dropbox/rpkgs/qcdh/inst/tests/test3.r', echo=TRUE)
x = matrix(sample(0:2, 100, replace=TRUE), 10)
y = matrix(sample(0:2, 100, replace=TRUE), 10)
x
y
collapseGenRcppGen(x, y, 'pos')
x = matrix(sample(0:2, 16, replace=TRUE), 4)
y = matrix(sample(0:2, 16, replace=TRUE), 4)
x
y
collapseGenRcppGen(x, y, 'pos')
x+ y
x = matrix(sample(0:2, 16, replace=TRUE), 4)
y = matrix(sample(0:2, 16, replace=TRUE), 4)
x + y
collapseGenRcppGen(x, y, 'pos')
collapseGenRcppGen(x, y, 'neg')
collapseGenRcppGen(x, y, 'neu')
x + y
collapseGenRcppGen(x, y, 'neg')
x + y
collapseGenRcppGen(x, y, 'neu')
-12 * (-3:3) + 91
-12 * ((-3):3) + 91
require(bigmemory)
x = matrix(1:6, 2, )
bmfile = "x.bmbin"
bmdesfile = "x.bmdes"
bigmat = as.big.matrix(x, type="short", backingfile=bmfile, descriptorfile=bmdesfile)
bigmat
bigmat[:]
bigmat[,]
x = matrix(1:6, 2, byrow=T)
bmfile = "x.bmbin"
bmdesfile = "x.bmdes"
bigmat = as.big.matrix(x, type="short", backingfile=bmfile, descriptorfile=bmdesfile)
bigmat[,]
require(bigmemory)
x = matrix(1:6, 2, byrow=T)
bmfile = "x.bmbin"
bmdesfile = "x.bmdes"
bigmat = as.big.matrix(x, type="short", backingfile=bmfile, descriptorfile=bmdesfile)
bigmat[,]
getwd()
setwd("/tmp")
require(bigmemory)
x = matrix(1:6, 2, byrow=T)
bmfile = "x.bmbin"
bmdesfile = "x.bmdes"
bigmat = as.big.matrix(x, type="short", backingfile=bmfile, descriptorfile=bmdesfile)
bigmat[,]
2^16 - 1
x = matrix(rnorm(300), 100)
y = matrix(rnorm(100), 100)
mycovs = matrix(rnorm(200), 100)
x = matrix(sample(0:2, 300, replace=T), 100)
head(x)
head(y)
head(mycovs)
require(bigmemory)
setwd("~/workspace/qcdhcpp/data/")
x = matrix(rnorm(300), 100)
bmfilex = "lmtest2x.bmbin"
bmdesfilex = "lmtest2x.bmdes"
bigmat = as.big.matrix(x, type="double", backingfile=bmfilex, descriptorfile=bmdesfilex)
bigmat[,]
y = matrix(rnorm(100), 100, 1)
bmfiley = "lmtest2y.bmbin"
bmdesfiley = "lmtest2y.bmdes"
bigmaty = as.big.matrix(y, type="double", backingfile=bmfiley, descriptorfile=bmdesfiley)
lmsum = summary(lm(y~x))$coef
lmsum
colnames(lmsum) = NULL
rownames(lmsum) = NULL
bmfileLm = "lmtest2lmres.bmbin"
bmdesfileLm = "lmtest2lmres.bmdes"
bigmatLmsum = as.big.matrix(lmsum, type="double", backingfile=bmfileLm, descriptorfile=bmdesfileLm)
x
x = matrix(sample(0:2, 300, replace=T), 100)
y = matrix(rnorm(100), 100)
mycovs = matrix(rnorm(200), 100)
head(x)
head(y)
head(mycovs)
pvals = matrix(, nrow=0, ncol=1)
pvals
for (i in 1:3) {
xmat = cbind(x[, i], mycovs)
pvals[i, 1] = summary(lm(y~xmat))$coef[2, 4]
}
pvals = matrix(, nrow=3, ncol=1)
pvals
for (i in 1:3) {
xmat = cbind(x[, i], mycovs)
pvals[i, 1] = summary(lm(y~xmat))$coef[2, 4]
}
pvals
x = matrix(rnorm(300), 100)
x = matrix(sample(0:2, 300, replace=T), 100)
y = matrix(rnorm(100), 100)
bmfilePvalEachy = "pvalEachy.bmbin"
bmdesfilePvalEachy = "pvalEachy.bmdes"
bigmatPvalEachy = as.big.matrix(y, type="double", backingfile = bmfilePvalEachy, descriptorfile = bmdesfilePvalEachy)
bmfilePvalEachx = "pvalEachx.bmbin"
bmdesfilePvalEachx = "pvalEachx.bmdes"
bigmatPvalEachx = as.big.matrix(x, type="double", backingfile = bmfilePvalEachx, descriptorfile = bmdesfilePvalEachx)
bmfilePvalEachCov = "pvalEachCov.bmbin"
bmdesfilePvalEachCov = "pvalEachCov.bmdes"
bigmatPvalEachCov = as.big.matrix(mycovs, type="double", backingfile = bmfilePvalEachCov, descriptorfile = bmdesfilePvalEachCov)
bigmatPvalEachCov[,]
bigmatPvalEachx
bigmatPvalEachx[,]
bigmatPvalEachy[,]
pvals
bmfilePvalEachPval = "pvalEachPval.bmbin"
bmdesfilePvalEachPval = "pvalEachPval.bmdes"
bigmatPvalEachPval = as.big.matrix(pvals, type="double", backingfile = bmfilePvalEachPval, descriptorfile = bmdesfilePvalEachPval)
bigmatPvalEachPval[,]
for (i in 1:3) {
xmat = cbind(x[, i], mycovs)
print(head(xmat))
pvals[i, 1] = summary(lm(y~xmat))$coef[2, 4]
}
pvals
for (i in 1:3) {
xmat = cbind(x[, i], mycovs)
print(head(xmat))
print(summary(lm(y~xmat))$coef[2, 4])
pvals[i, 1] = summary(lm(y~xmat))$coef[2, 4]
}
for (i in 1:3) {
xmat = cbind(x[, i], mycovs)
print(head(xmat))
print(summary(lm(y~xmat))$coef)
# pvals[i, 1] = summary(lm(y~xmat))$coef[2, 4]
}
for (i in 1:3) {
xmat = cbind(x[, i], mycovs)
print(head(xmat))
print(summary(lm(y~xmat))$coef)
pvals[i, 1] = summary(lm(y~xmat))$coef[2, 4]
}
pvals
bmfilePvalEachPval = "pvalEachPval.bmbin"
bmdesfilePvalEachPval = "pvalEachPval.bmdes"
bigmatPvalEachPval = as.big.matrix(pvals, type="double", backingfile = bmfilePvalEachPval, descriptorfile = bmdesfilePvalEachPval)
bigmatPvalEachPval[,]
